type: edu
files:
- name: game.py
  visible: true
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from hstest import *
    import re


    class LastPencilTest(StageTest):
        @dynamic_test()
        def CheckOutput(self):
            main = TestedProgram()
            output = main.start().lower()
            lines = output.strip().split('\n')
            if len(lines) != 1 or "how many pencils" not in output:
                raise WrongAnswer("When the game starts, it should output only one line asking the user about the amount "
                                  "of pencils they would like to use with the \"How many pencils\" string.")

            output2 = main.execute("1")
            output2 = output2.replace(" ", "")
            pattern = re.compile(".*\([a-zA-Z_0-9]+,[a-zA-Z_0-9]+\)")
            if len(output2.split()) != 1:
                raise WrongAnswer("When the user replies with the amount of pencils, the game should print 1 non-empty "
                                  "line asking who will be the first player.\n"
                                  f"{len(output2.split())} lines were found in the output.")
            if not re.match(pattern, output2):
                raise WrongAnswer("When the user replies with the amount of pencils, the game should ask who will"
                                  " be the first player ending with the \"(\"Name1\", \"Name2\")\" string.")
            return CheckResult.correct()

        test_data = [
            [5, 1, [2, 1, 2]],
            [20, 1, [3, 2, 3, 1, 2, 3, 3, 3]],
            [30, 1, [3, 2, 3, 1, 2, 3, 3, 3, 2, 1, 2, 3, 2]],
            [15, 1, [8, 9]],
            [5, 2, [2, 1, 2]],
            [20, 2, [3, 2, 3, 1, 2, 3, 3, 3]],
            [30, 2, [3, 2, 3, 1, 2, 3, 3, 3, 2, 1, 2, 3, 2]],
            [15, 2, [8, 9]]
        ]

        @dynamic_test(data=test_data)
        def CheckGame(self, amount, first, moves):
            main = TestedProgram()
            main.start()
            output2 = main.execute(str(amount))
            output2 = output2.replace(" ", "")

            leftName = output2[output2.rfind('(') + 1:output2.rfind(',')]
            rightName = output2[output2.rfind(',') + 1:output2.rfind(')')]

            prevPlayer = ""
            nextPlayer = ""
            if first == 1:
                prevPlayer = leftName
                nextPlayer = rightName
            else:
                prevPlayer = rightName
                nextPlayer = leftName

            output3 = main.execute(prevPlayer).lower()

            lines = output3.strip().split('\n')
            linesNonEmpty = [s for s in lines if len(s) != 0]

            if len(linesNonEmpty) != 2:
                raise WrongAnswer("When the player provides the initial game conditions"
                                  ", your program should print 2 non-empty lines:\n"
                                  "one with with vertical bar symbols representing the number of pencils, "
                                  "the other with the \"*NameX* turn\" string.\n"
                                  f"{len(linesNonEmpty)} lines were found in the output.")

            checkPencils = [s for s in lines if '|' in s]
            if len(checkPencils) == 0:
                raise WrongAnswer("When the player provides the initial game conditions"
                                  ", your program should print one line with several vertical bar "
                                  "symbols ('|') representing pencils.")
            if len(checkPencils) > 1:
                raise WrongAnswer("When the player provides the initial game conditions"
                                  ", your program should print only one line with several vertical bar "
                                  "symbols ('|') representing pencils.")
            if len(list(set(checkPencils[0]))) != 1:
                raise WrongAnswer("The line with pencils should not contain any symbols other than the '|' symbol.")

            if len(checkPencils[0]) != int(amount):
                raise WrongAnswer("The line with pencils should contain as many '|' symbols as the player provided.")

            checkTurn = any((prevPlayer.lower() in s) and ("turn" in s) for s in lines)

            if not checkTurn:
                raise WrongAnswer(f"When the player provides the initial game conditions"
                                  f" there should be a line in output that contains the \"{prevPlayer}\'s turn\""
                                  f" string if {prevPlayer} is the first player.")

            onTable = amount

            for i in moves:
                onTable -= i
                output = main.execute(str(i)).lower()
                lines = output.strip().split('\n')
                linesNonEmpty = [s for s in lines if len(s) != 0]

                if onTable <= 0:
                    if len(linesNonEmpty) != 0:
                        raise WrongAnswer("After the last pencil is taken, there should be no output.")
                    else:
                        break

                if len(linesNonEmpty) != 2:
                    raise WrongAnswer("When one of the players enters the amount of pencils they want to remove"
                                      ", your program should print 2 non-empty lines.")

                checkPencils = [s for s in lines if '|' in s]
                if len(checkPencils) == 0:
                    raise WrongAnswer("When one of the players enters the amount of pencils they want to remove"
                                      ", your program should print one line with vertical bar symbols ('|') representing "
                                      "pencils.")
                if len(checkPencils) > 1:
                    raise WrongAnswer("When one of the players enters the amount of pencils they want to remove"
                                      ", your program should print only one line with vertical bar symbols ('|') "
                                      "representing pencils.")
                if len(list(set(checkPencils[0]))) != 1:
                    raise WrongAnswer("The line with pencils should not contain any symbols other than the '|' symbol.")

                if len(checkPencils[0]) != onTable:
                    raise WrongAnswer("When one of the players enters the amount of pencils they want to remove, "
                                      "the line with pencils should contain as many '|' symbols as there are pencils left.")

                checkTurn = any((nextPlayer.lower() in s) and ("turn" in s) for s in lines)

                if not checkTurn:
                    raise WrongAnswer(f"When {prevPlayer} enters the amount of pencils they want to remove, "
                                      f"there should be a line in the output that contains \"{nextPlayer} turn\".")
                prevPlayer, nextPlayer = nextPlayer, prevPlayer
            if not main.is_finished():
                raise WrongAnswer("Your program should not request anything when there are no pencils left.")

            return CheckResult.correct()


    if __name__ == '__main__':
        LastPencilTest().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/258/stages/1304/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 08 Oct 2022 16:30:07 UTC
record: 3
